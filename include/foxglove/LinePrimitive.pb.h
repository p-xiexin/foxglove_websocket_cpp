// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/LinePrimitive.proto

#ifndef PROTOBUF_INCLUDED_foxglove_2fLinePrimitive_2eproto
#define PROTOBUF_INCLUDED_foxglove_2fLinePrimitive_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "foxglove/Color.pb.h"
#include "foxglove/Point3.pb.h"
#include "foxglove/Pose.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_foxglove_2fLinePrimitive_2eproto 

namespace protobuf_foxglove_2fLinePrimitive_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_foxglove_2fLinePrimitive_2eproto
namespace foxglove {
class LinePrimitive;
class LinePrimitiveDefaultTypeInternal;
extern LinePrimitiveDefaultTypeInternal _LinePrimitive_default_instance_;
}  // namespace foxglove
namespace google {
namespace protobuf {
template<> ::foxglove::LinePrimitive* Arena::CreateMaybeMessage<::foxglove::LinePrimitive>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace foxglove {

enum LinePrimitive_Type {
  LinePrimitive_Type_LINE_STRIP = 0,
  LinePrimitive_Type_LINE_LOOP = 1,
  LinePrimitive_Type_LINE_LIST = 2,
  LinePrimitive_Type_LinePrimitive_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LinePrimitive_Type_LinePrimitive_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LinePrimitive_Type_IsValid(int value);
const LinePrimitive_Type LinePrimitive_Type_Type_MIN = LinePrimitive_Type_LINE_STRIP;
const LinePrimitive_Type LinePrimitive_Type_Type_MAX = LinePrimitive_Type_LINE_LIST;
const int LinePrimitive_Type_Type_ARRAYSIZE = LinePrimitive_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* LinePrimitive_Type_descriptor();
inline const ::std::string& LinePrimitive_Type_Name(LinePrimitive_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    LinePrimitive_Type_descriptor(), value);
}
inline bool LinePrimitive_Type_Parse(
    const ::std::string& name, LinePrimitive_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LinePrimitive_Type>(
    LinePrimitive_Type_descriptor(), name, value);
}
// ===================================================================

class LinePrimitive : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:foxglove.LinePrimitive) */ {
 public:
  LinePrimitive();
  virtual ~LinePrimitive();

  LinePrimitive(const LinePrimitive& from);

  inline LinePrimitive& operator=(const LinePrimitive& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LinePrimitive(LinePrimitive&& from) noexcept
    : LinePrimitive() {
    *this = ::std::move(from);
  }

  inline LinePrimitive& operator=(LinePrimitive&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LinePrimitive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinePrimitive* internal_default_instance() {
    return reinterpret_cast<const LinePrimitive*>(
               &_LinePrimitive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LinePrimitive* other);
  friend void swap(LinePrimitive& a, LinePrimitive& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LinePrimitive* New() const final {
    return CreateMaybeMessage<LinePrimitive>(NULL);
  }

  LinePrimitive* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LinePrimitive>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LinePrimitive& from);
  void MergeFrom(const LinePrimitive& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinePrimitive* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LinePrimitive_Type Type;
  static const Type LINE_STRIP =
    LinePrimitive_Type_LINE_STRIP;
  static const Type LINE_LOOP =
    LinePrimitive_Type_LINE_LOOP;
  static const Type LINE_LIST =
    LinePrimitive_Type_LINE_LIST;
  static inline bool Type_IsValid(int value) {
    return LinePrimitive_Type_IsValid(value);
  }
  static const Type Type_MIN =
    LinePrimitive_Type_Type_MIN;
  static const Type Type_MAX =
    LinePrimitive_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    LinePrimitive_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return LinePrimitive_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return LinePrimitive_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return LinePrimitive_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .foxglove.Point3 points = 5;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 5;
  ::foxglove::Point3* mutable_points(int index);
  ::google::protobuf::RepeatedPtrField< ::foxglove::Point3 >*
      mutable_points();
  const ::foxglove::Point3& points(int index) const;
  ::foxglove::Point3* add_points();
  const ::google::protobuf::RepeatedPtrField< ::foxglove::Point3 >&
      points() const;

  // repeated .foxglove.Color colors = 7;
  int colors_size() const;
  void clear_colors();
  static const int kColorsFieldNumber = 7;
  ::foxglove::Color* mutable_colors(int index);
  ::google::protobuf::RepeatedPtrField< ::foxglove::Color >*
      mutable_colors();
  const ::foxglove::Color& colors(int index) const;
  ::foxglove::Color* add_colors();
  const ::google::protobuf::RepeatedPtrField< ::foxglove::Color >&
      colors() const;

  // repeated fixed32 indices = 8;
  int indices_size() const;
  void clear_indices();
  static const int kIndicesFieldNumber = 8;
  ::google::protobuf::uint32 indices(int index) const;
  void set_indices(int index, ::google::protobuf::uint32 value);
  void add_indices(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      indices() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_indices();

  // .foxglove.Pose pose = 2;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 2;
  private:
  const ::foxglove::Pose& _internal_pose() const;
  public:
  const ::foxglove::Pose& pose() const;
  ::foxglove::Pose* release_pose();
  ::foxglove::Pose* mutable_pose();
  void set_allocated_pose(::foxglove::Pose* pose);

  // .foxglove.Color color = 6;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 6;
  private:
  const ::foxglove::Color& _internal_color() const;
  public:
  const ::foxglove::Color& color() const;
  ::foxglove::Color* release_color();
  ::foxglove::Color* mutable_color();
  void set_allocated_color(::foxglove::Color* color);

  // .foxglove.LinePrimitive.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::foxglove::LinePrimitive_Type type() const;
  void set_type(::foxglove::LinePrimitive_Type value);

  // bool scale_invariant = 4;
  void clear_scale_invariant();
  static const int kScaleInvariantFieldNumber = 4;
  bool scale_invariant() const;
  void set_scale_invariant(bool value);

  // double thickness = 3;
  void clear_thickness();
  static const int kThicknessFieldNumber = 3;
  double thickness() const;
  void set_thickness(double value);

  // @@protoc_insertion_point(class_scope:foxglove.LinePrimitive)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::foxglove::Point3 > points_;
  ::google::protobuf::RepeatedPtrField< ::foxglove::Color > colors_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > indices_;
  mutable int _indices_cached_byte_size_;
  ::foxglove::Pose* pose_;
  ::foxglove::Color* color_;
  int type_;
  bool scale_invariant_;
  double thickness_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_foxglove_2fLinePrimitive_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LinePrimitive

// .foxglove.LinePrimitive.Type type = 1;
inline void LinePrimitive::clear_type() {
  type_ = 0;
}
inline ::foxglove::LinePrimitive_Type LinePrimitive::type() const {
  // @@protoc_insertion_point(field_get:foxglove.LinePrimitive.type)
  return static_cast< ::foxglove::LinePrimitive_Type >(type_);
}
inline void LinePrimitive::set_type(::foxglove::LinePrimitive_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:foxglove.LinePrimitive.type)
}

// .foxglove.Pose pose = 2;
inline bool LinePrimitive::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline const ::foxglove::Pose& LinePrimitive::_internal_pose() const {
  return *pose_;
}
inline const ::foxglove::Pose& LinePrimitive::pose() const {
  const ::foxglove::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:foxglove.LinePrimitive.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::foxglove::Pose*>(
      &::foxglove::_Pose_default_instance_);
}
inline ::foxglove::Pose* LinePrimitive::release_pose() {
  // @@protoc_insertion_point(field_release:foxglove.LinePrimitive.pose)
  
  ::foxglove::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::foxglove::Pose* LinePrimitive::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::foxglove::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:foxglove.LinePrimitive.pose)
  return pose_;
}
inline void LinePrimitive::set_allocated_pose(::foxglove::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:foxglove.LinePrimitive.pose)
}

// double thickness = 3;
inline void LinePrimitive::clear_thickness() {
  thickness_ = 0;
}
inline double LinePrimitive::thickness() const {
  // @@protoc_insertion_point(field_get:foxglove.LinePrimitive.thickness)
  return thickness_;
}
inline void LinePrimitive::set_thickness(double value) {
  
  thickness_ = value;
  // @@protoc_insertion_point(field_set:foxglove.LinePrimitive.thickness)
}

// bool scale_invariant = 4;
inline void LinePrimitive::clear_scale_invariant() {
  scale_invariant_ = false;
}
inline bool LinePrimitive::scale_invariant() const {
  // @@protoc_insertion_point(field_get:foxglove.LinePrimitive.scale_invariant)
  return scale_invariant_;
}
inline void LinePrimitive::set_scale_invariant(bool value) {
  
  scale_invariant_ = value;
  // @@protoc_insertion_point(field_set:foxglove.LinePrimitive.scale_invariant)
}

// repeated .foxglove.Point3 points = 5;
inline int LinePrimitive::points_size() const {
  return points_.size();
}
inline ::foxglove::Point3* LinePrimitive::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:foxglove.LinePrimitive.points)
  return points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::foxglove::Point3 >*
LinePrimitive::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:foxglove.LinePrimitive.points)
  return &points_;
}
inline const ::foxglove::Point3& LinePrimitive::points(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.LinePrimitive.points)
  return points_.Get(index);
}
inline ::foxglove::Point3* LinePrimitive::add_points() {
  // @@protoc_insertion_point(field_add:foxglove.LinePrimitive.points)
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::foxglove::Point3 >&
LinePrimitive::points() const {
  // @@protoc_insertion_point(field_list:foxglove.LinePrimitive.points)
  return points_;
}

// .foxglove.Color color = 6;
inline bool LinePrimitive::has_color() const {
  return this != internal_default_instance() && color_ != NULL;
}
inline const ::foxglove::Color& LinePrimitive::_internal_color() const {
  return *color_;
}
inline const ::foxglove::Color& LinePrimitive::color() const {
  const ::foxglove::Color* p = color_;
  // @@protoc_insertion_point(field_get:foxglove.LinePrimitive.color)
  return p != NULL ? *p : *reinterpret_cast<const ::foxglove::Color*>(
      &::foxglove::_Color_default_instance_);
}
inline ::foxglove::Color* LinePrimitive::release_color() {
  // @@protoc_insertion_point(field_release:foxglove.LinePrimitive.color)
  
  ::foxglove::Color* temp = color_;
  color_ = NULL;
  return temp;
}
inline ::foxglove::Color* LinePrimitive::mutable_color() {
  
  if (color_ == NULL) {
    auto* p = CreateMaybeMessage<::foxglove::Color>(GetArenaNoVirtual());
    color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:foxglove.LinePrimitive.color)
  return color_;
}
inline void LinePrimitive::set_allocated_color(::foxglove::Color* color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(color_);
  }
  if (color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:foxglove.LinePrimitive.color)
}

// repeated .foxglove.Color colors = 7;
inline int LinePrimitive::colors_size() const {
  return colors_.size();
}
inline ::foxglove::Color* LinePrimitive::mutable_colors(int index) {
  // @@protoc_insertion_point(field_mutable:foxglove.LinePrimitive.colors)
  return colors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::foxglove::Color >*
LinePrimitive::mutable_colors() {
  // @@protoc_insertion_point(field_mutable_list:foxglove.LinePrimitive.colors)
  return &colors_;
}
inline const ::foxglove::Color& LinePrimitive::colors(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.LinePrimitive.colors)
  return colors_.Get(index);
}
inline ::foxglove::Color* LinePrimitive::add_colors() {
  // @@protoc_insertion_point(field_add:foxglove.LinePrimitive.colors)
  return colors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::foxglove::Color >&
LinePrimitive::colors() const {
  // @@protoc_insertion_point(field_list:foxglove.LinePrimitive.colors)
  return colors_;
}

// repeated fixed32 indices = 8;
inline int LinePrimitive::indices_size() const {
  return indices_.size();
}
inline void LinePrimitive::clear_indices() {
  indices_.Clear();
}
inline ::google::protobuf::uint32 LinePrimitive::indices(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.LinePrimitive.indices)
  return indices_.Get(index);
}
inline void LinePrimitive::set_indices(int index, ::google::protobuf::uint32 value) {
  indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:foxglove.LinePrimitive.indices)
}
inline void LinePrimitive::add_indices(::google::protobuf::uint32 value) {
  indices_.Add(value);
  // @@protoc_insertion_point(field_add:foxglove.LinePrimitive.indices)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LinePrimitive::indices() const {
  // @@protoc_insertion_point(field_list:foxglove.LinePrimitive.indices)
  return indices_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LinePrimitive::mutable_indices() {
  // @@protoc_insertion_point(field_mutable_list:foxglove.LinePrimitive.indices)
  return &indices_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace foxglove

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::foxglove::LinePrimitive_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::foxglove::LinePrimitive_Type>() {
  return ::foxglove::LinePrimitive_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_foxglove_2fLinePrimitive_2eproto

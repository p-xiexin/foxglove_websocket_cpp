// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/FrameTransform.proto

#ifndef PROTOBUF_INCLUDED_foxglove_2fFrameTransform_2eproto
#define PROTOBUF_INCLUDED_foxglove_2fFrameTransform_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "foxglove/Quaternion.pb.h"
#include "foxglove/Vector3.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_foxglove_2fFrameTransform_2eproto 

namespace protobuf_foxglove_2fFrameTransform_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_foxglove_2fFrameTransform_2eproto
namespace foxglove {
class FrameTransform;
class FrameTransformDefaultTypeInternal;
extern FrameTransformDefaultTypeInternal _FrameTransform_default_instance_;
}  // namespace foxglove
namespace google {
namespace protobuf {
template<> ::foxglove::FrameTransform* Arena::CreateMaybeMessage<::foxglove::FrameTransform>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace foxglove {

// ===================================================================

class FrameTransform : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:foxglove.FrameTransform) */ {
 public:
  FrameTransform();
  virtual ~FrameTransform();

  FrameTransform(const FrameTransform& from);

  inline FrameTransform& operator=(const FrameTransform& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FrameTransform(FrameTransform&& from) noexcept
    : FrameTransform() {
    *this = ::std::move(from);
  }

  inline FrameTransform& operator=(FrameTransform&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameTransform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameTransform* internal_default_instance() {
    return reinterpret_cast<const FrameTransform*>(
               &_FrameTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FrameTransform* other);
  friend void swap(FrameTransform& a, FrameTransform& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FrameTransform* New() const final {
    return CreateMaybeMessage<FrameTransform>(NULL);
  }

  FrameTransform* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FrameTransform>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FrameTransform& from);
  void MergeFrom(const FrameTransform& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameTransform* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent_frame_id = 2;
  void clear_parent_frame_id();
  static const int kParentFrameIdFieldNumber = 2;
  const ::std::string& parent_frame_id() const;
  void set_parent_frame_id(const ::std::string& value);
  #if LANG_CXX11
  void set_parent_frame_id(::std::string&& value);
  #endif
  void set_parent_frame_id(const char* value);
  void set_parent_frame_id(const char* value, size_t size);
  ::std::string* mutable_parent_frame_id();
  ::std::string* release_parent_frame_id();
  void set_allocated_parent_frame_id(::std::string* parent_frame_id);

  // string child_frame_id = 3;
  void clear_child_frame_id();
  static const int kChildFrameIdFieldNumber = 3;
  const ::std::string& child_frame_id() const;
  void set_child_frame_id(const ::std::string& value);
  #if LANG_CXX11
  void set_child_frame_id(::std::string&& value);
  #endif
  void set_child_frame_id(const char* value);
  void set_child_frame_id(const char* value, size_t size);
  ::std::string* mutable_child_frame_id();
  ::std::string* release_child_frame_id();
  void set_allocated_child_frame_id(::std::string* child_frame_id);

  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  public:
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // .foxglove.Vector3 translation = 4;
  bool has_translation() const;
  void clear_translation();
  static const int kTranslationFieldNumber = 4;
  private:
  const ::foxglove::Vector3& _internal_translation() const;
  public:
  const ::foxglove::Vector3& translation() const;
  ::foxglove::Vector3* release_translation();
  ::foxglove::Vector3* mutable_translation();
  void set_allocated_translation(::foxglove::Vector3* translation);

  // .foxglove.Quaternion rotation = 5;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 5;
  private:
  const ::foxglove::Quaternion& _internal_rotation() const;
  public:
  const ::foxglove::Quaternion& rotation() const;
  ::foxglove::Quaternion* release_rotation();
  ::foxglove::Quaternion* mutable_rotation();
  void set_allocated_rotation(::foxglove::Quaternion* rotation);

  // @@protoc_insertion_point(class_scope:foxglove.FrameTransform)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_frame_id_;
  ::google::protobuf::internal::ArenaStringPtr child_frame_id_;
  ::google::protobuf::Timestamp* timestamp_;
  ::foxglove::Vector3* translation_;
  ::foxglove::Quaternion* rotation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_foxglove_2fFrameTransform_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FrameTransform

// .google.protobuf.Timestamp timestamp = 1;
inline bool FrameTransform::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline const ::google::protobuf::Timestamp& FrameTransform::_internal_timestamp() const {
  return *timestamp_;
}
inline const ::google::protobuf::Timestamp& FrameTransform::timestamp() const {
  const ::google::protobuf::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:foxglove.FrameTransform.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* FrameTransform::release_timestamp() {
  // @@protoc_insertion_point(field_release:foxglove.FrameTransform.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* FrameTransform::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:foxglove.FrameTransform.timestamp)
  return timestamp_;
}
inline void FrameTransform::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:foxglove.FrameTransform.timestamp)
}

// string parent_frame_id = 2;
inline void FrameTransform::clear_parent_frame_id() {
  parent_frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FrameTransform::parent_frame_id() const {
  // @@protoc_insertion_point(field_get:foxglove.FrameTransform.parent_frame_id)
  return parent_frame_id_.GetNoArena();
}
inline void FrameTransform::set_parent_frame_id(const ::std::string& value) {
  
  parent_frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:foxglove.FrameTransform.parent_frame_id)
}
#if LANG_CXX11
inline void FrameTransform::set_parent_frame_id(::std::string&& value) {
  
  parent_frame_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:foxglove.FrameTransform.parent_frame_id)
}
#endif
inline void FrameTransform::set_parent_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:foxglove.FrameTransform.parent_frame_id)
}
inline void FrameTransform::set_parent_frame_id(const char* value, size_t size) {
  
  parent_frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:foxglove.FrameTransform.parent_frame_id)
}
inline ::std::string* FrameTransform::mutable_parent_frame_id() {
  
  // @@protoc_insertion_point(field_mutable:foxglove.FrameTransform.parent_frame_id)
  return parent_frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FrameTransform::release_parent_frame_id() {
  // @@protoc_insertion_point(field_release:foxglove.FrameTransform.parent_frame_id)
  
  return parent_frame_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FrameTransform::set_allocated_parent_frame_id(::std::string* parent_frame_id) {
  if (parent_frame_id != NULL) {
    
  } else {
    
  }
  parent_frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_frame_id);
  // @@protoc_insertion_point(field_set_allocated:foxglove.FrameTransform.parent_frame_id)
}

// string child_frame_id = 3;
inline void FrameTransform::clear_child_frame_id() {
  child_frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FrameTransform::child_frame_id() const {
  // @@protoc_insertion_point(field_get:foxglove.FrameTransform.child_frame_id)
  return child_frame_id_.GetNoArena();
}
inline void FrameTransform::set_child_frame_id(const ::std::string& value) {
  
  child_frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:foxglove.FrameTransform.child_frame_id)
}
#if LANG_CXX11
inline void FrameTransform::set_child_frame_id(::std::string&& value) {
  
  child_frame_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:foxglove.FrameTransform.child_frame_id)
}
#endif
inline void FrameTransform::set_child_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  child_frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:foxglove.FrameTransform.child_frame_id)
}
inline void FrameTransform::set_child_frame_id(const char* value, size_t size) {
  
  child_frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:foxglove.FrameTransform.child_frame_id)
}
inline ::std::string* FrameTransform::mutable_child_frame_id() {
  
  // @@protoc_insertion_point(field_mutable:foxglove.FrameTransform.child_frame_id)
  return child_frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FrameTransform::release_child_frame_id() {
  // @@protoc_insertion_point(field_release:foxglove.FrameTransform.child_frame_id)
  
  return child_frame_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FrameTransform::set_allocated_child_frame_id(::std::string* child_frame_id) {
  if (child_frame_id != NULL) {
    
  } else {
    
  }
  child_frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), child_frame_id);
  // @@protoc_insertion_point(field_set_allocated:foxglove.FrameTransform.child_frame_id)
}

// .foxglove.Vector3 translation = 4;
inline bool FrameTransform::has_translation() const {
  return this != internal_default_instance() && translation_ != NULL;
}
inline const ::foxglove::Vector3& FrameTransform::_internal_translation() const {
  return *translation_;
}
inline const ::foxglove::Vector3& FrameTransform::translation() const {
  const ::foxglove::Vector3* p = translation_;
  // @@protoc_insertion_point(field_get:foxglove.FrameTransform.translation)
  return p != NULL ? *p : *reinterpret_cast<const ::foxglove::Vector3*>(
      &::foxglove::_Vector3_default_instance_);
}
inline ::foxglove::Vector3* FrameTransform::release_translation() {
  // @@protoc_insertion_point(field_release:foxglove.FrameTransform.translation)
  
  ::foxglove::Vector3* temp = translation_;
  translation_ = NULL;
  return temp;
}
inline ::foxglove::Vector3* FrameTransform::mutable_translation() {
  
  if (translation_ == NULL) {
    auto* p = CreateMaybeMessage<::foxglove::Vector3>(GetArenaNoVirtual());
    translation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:foxglove.FrameTransform.translation)
  return translation_;
}
inline void FrameTransform::set_allocated_translation(::foxglove::Vector3* translation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(translation_);
  }
  if (translation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      translation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    
  } else {
    
  }
  translation_ = translation;
  // @@protoc_insertion_point(field_set_allocated:foxglove.FrameTransform.translation)
}

// .foxglove.Quaternion rotation = 5;
inline bool FrameTransform::has_rotation() const {
  return this != internal_default_instance() && rotation_ != NULL;
}
inline const ::foxglove::Quaternion& FrameTransform::_internal_rotation() const {
  return *rotation_;
}
inline const ::foxglove::Quaternion& FrameTransform::rotation() const {
  const ::foxglove::Quaternion* p = rotation_;
  // @@protoc_insertion_point(field_get:foxglove.FrameTransform.rotation)
  return p != NULL ? *p : *reinterpret_cast<const ::foxglove::Quaternion*>(
      &::foxglove::_Quaternion_default_instance_);
}
inline ::foxglove::Quaternion* FrameTransform::release_rotation() {
  // @@protoc_insertion_point(field_release:foxglove.FrameTransform.rotation)
  
  ::foxglove::Quaternion* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline ::foxglove::Quaternion* FrameTransform::mutable_rotation() {
  
  if (rotation_ == NULL) {
    auto* p = CreateMaybeMessage<::foxglove::Quaternion>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:foxglove.FrameTransform.rotation)
  return rotation_;
}
inline void FrameTransform::set_allocated_rotation(::foxglove::Quaternion* rotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rotation_);
  }
  if (rotation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:foxglove.FrameTransform.rotation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace foxglove

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_foxglove_2fFrameTransform_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/TextAnnotation.proto

#ifndef PROTOBUF_INCLUDED_foxglove_2fTextAnnotation_2eproto
#define PROTOBUF_INCLUDED_foxglove_2fTextAnnotation_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "foxglove/Color.pb.h"
#include "foxglove/Point2.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_foxglove_2fTextAnnotation_2eproto 

namespace protobuf_foxglove_2fTextAnnotation_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_foxglove_2fTextAnnotation_2eproto
namespace foxglove {
class TextAnnotation;
class TextAnnotationDefaultTypeInternal;
extern TextAnnotationDefaultTypeInternal _TextAnnotation_default_instance_;
}  // namespace foxglove
namespace google {
namespace protobuf {
template<> ::foxglove::TextAnnotation* Arena::CreateMaybeMessage<::foxglove::TextAnnotation>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace foxglove {

// ===================================================================

class TextAnnotation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:foxglove.TextAnnotation) */ {
 public:
  TextAnnotation();
  virtual ~TextAnnotation();

  TextAnnotation(const TextAnnotation& from);

  inline TextAnnotation& operator=(const TextAnnotation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TextAnnotation(TextAnnotation&& from) noexcept
    : TextAnnotation() {
    *this = ::std::move(from);
  }

  inline TextAnnotation& operator=(TextAnnotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TextAnnotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TextAnnotation* internal_default_instance() {
    return reinterpret_cast<const TextAnnotation*>(
               &_TextAnnotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TextAnnotation* other);
  friend void swap(TextAnnotation& a, TextAnnotation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TextAnnotation* New() const final {
    return CreateMaybeMessage<TextAnnotation>(NULL);
  }

  TextAnnotation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TextAnnotation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TextAnnotation& from);
  void MergeFrom(const TextAnnotation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextAnnotation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 3;
  void clear_text();
  static const int kTextFieldNumber = 3;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  public:
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // .foxglove.Point2 position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  private:
  const ::foxglove::Point2& _internal_position() const;
  public:
  const ::foxglove::Point2& position() const;
  ::foxglove::Point2* release_position();
  ::foxglove::Point2* mutable_position();
  void set_allocated_position(::foxglove::Point2* position);

  // .foxglove.Color text_color = 5;
  bool has_text_color() const;
  void clear_text_color();
  static const int kTextColorFieldNumber = 5;
  private:
  const ::foxglove::Color& _internal_text_color() const;
  public:
  const ::foxglove::Color& text_color() const;
  ::foxglove::Color* release_text_color();
  ::foxglove::Color* mutable_text_color();
  void set_allocated_text_color(::foxglove::Color* text_color);

  // .foxglove.Color background_color = 6;
  bool has_background_color() const;
  void clear_background_color();
  static const int kBackgroundColorFieldNumber = 6;
  private:
  const ::foxglove::Color& _internal_background_color() const;
  public:
  const ::foxglove::Color& background_color() const;
  ::foxglove::Color* release_background_color();
  ::foxglove::Color* mutable_background_color();
  void set_allocated_background_color(::foxglove::Color* background_color);

  // double font_size = 4;
  void clear_font_size();
  static const int kFontSizeFieldNumber = 4;
  double font_size() const;
  void set_font_size(double value);

  // @@protoc_insertion_point(class_scope:foxglove.TextAnnotation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::Timestamp* timestamp_;
  ::foxglove::Point2* position_;
  ::foxglove::Color* text_color_;
  ::foxglove::Color* background_color_;
  double font_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_foxglove_2fTextAnnotation_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TextAnnotation

// .google.protobuf.Timestamp timestamp = 1;
inline bool TextAnnotation::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline const ::google::protobuf::Timestamp& TextAnnotation::_internal_timestamp() const {
  return *timestamp_;
}
inline const ::google::protobuf::Timestamp& TextAnnotation::timestamp() const {
  const ::google::protobuf::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:foxglove.TextAnnotation.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TextAnnotation::release_timestamp() {
  // @@protoc_insertion_point(field_release:foxglove.TextAnnotation.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TextAnnotation::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:foxglove.TextAnnotation.timestamp)
  return timestamp_;
}
inline void TextAnnotation::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:foxglove.TextAnnotation.timestamp)
}

// .foxglove.Point2 position = 2;
inline bool TextAnnotation::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline const ::foxglove::Point2& TextAnnotation::_internal_position() const {
  return *position_;
}
inline const ::foxglove::Point2& TextAnnotation::position() const {
  const ::foxglove::Point2* p = position_;
  // @@protoc_insertion_point(field_get:foxglove.TextAnnotation.position)
  return p != NULL ? *p : *reinterpret_cast<const ::foxglove::Point2*>(
      &::foxglove::_Point2_default_instance_);
}
inline ::foxglove::Point2* TextAnnotation::release_position() {
  // @@protoc_insertion_point(field_release:foxglove.TextAnnotation.position)
  
  ::foxglove::Point2* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::foxglove::Point2* TextAnnotation::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::foxglove::Point2>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:foxglove.TextAnnotation.position)
  return position_;
}
inline void TextAnnotation::set_allocated_position(::foxglove::Point2* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:foxglove.TextAnnotation.position)
}

// string text = 3;
inline void TextAnnotation::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TextAnnotation::text() const {
  // @@protoc_insertion_point(field_get:foxglove.TextAnnotation.text)
  return text_.GetNoArena();
}
inline void TextAnnotation::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:foxglove.TextAnnotation.text)
}
#if LANG_CXX11
inline void TextAnnotation::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:foxglove.TextAnnotation.text)
}
#endif
inline void TextAnnotation::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:foxglove.TextAnnotation.text)
}
inline void TextAnnotation::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:foxglove.TextAnnotation.text)
}
inline ::std::string* TextAnnotation::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:foxglove.TextAnnotation.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TextAnnotation::release_text() {
  // @@protoc_insertion_point(field_release:foxglove.TextAnnotation.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TextAnnotation::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:foxglove.TextAnnotation.text)
}

// double font_size = 4;
inline void TextAnnotation::clear_font_size() {
  font_size_ = 0;
}
inline double TextAnnotation::font_size() const {
  // @@protoc_insertion_point(field_get:foxglove.TextAnnotation.font_size)
  return font_size_;
}
inline void TextAnnotation::set_font_size(double value) {
  
  font_size_ = value;
  // @@protoc_insertion_point(field_set:foxglove.TextAnnotation.font_size)
}

// .foxglove.Color text_color = 5;
inline bool TextAnnotation::has_text_color() const {
  return this != internal_default_instance() && text_color_ != NULL;
}
inline const ::foxglove::Color& TextAnnotation::_internal_text_color() const {
  return *text_color_;
}
inline const ::foxglove::Color& TextAnnotation::text_color() const {
  const ::foxglove::Color* p = text_color_;
  // @@protoc_insertion_point(field_get:foxglove.TextAnnotation.text_color)
  return p != NULL ? *p : *reinterpret_cast<const ::foxglove::Color*>(
      &::foxglove::_Color_default_instance_);
}
inline ::foxglove::Color* TextAnnotation::release_text_color() {
  // @@protoc_insertion_point(field_release:foxglove.TextAnnotation.text_color)
  
  ::foxglove::Color* temp = text_color_;
  text_color_ = NULL;
  return temp;
}
inline ::foxglove::Color* TextAnnotation::mutable_text_color() {
  
  if (text_color_ == NULL) {
    auto* p = CreateMaybeMessage<::foxglove::Color>(GetArenaNoVirtual());
    text_color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:foxglove.TextAnnotation.text_color)
  return text_color_;
}
inline void TextAnnotation::set_allocated_text_color(::foxglove::Color* text_color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(text_color_);
  }
  if (text_color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      text_color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, text_color, submessage_arena);
    }
    
  } else {
    
  }
  text_color_ = text_color;
  // @@protoc_insertion_point(field_set_allocated:foxglove.TextAnnotation.text_color)
}

// .foxglove.Color background_color = 6;
inline bool TextAnnotation::has_background_color() const {
  return this != internal_default_instance() && background_color_ != NULL;
}
inline const ::foxglove::Color& TextAnnotation::_internal_background_color() const {
  return *background_color_;
}
inline const ::foxglove::Color& TextAnnotation::background_color() const {
  const ::foxglove::Color* p = background_color_;
  // @@protoc_insertion_point(field_get:foxglove.TextAnnotation.background_color)
  return p != NULL ? *p : *reinterpret_cast<const ::foxglove::Color*>(
      &::foxglove::_Color_default_instance_);
}
inline ::foxglove::Color* TextAnnotation::release_background_color() {
  // @@protoc_insertion_point(field_release:foxglove.TextAnnotation.background_color)
  
  ::foxglove::Color* temp = background_color_;
  background_color_ = NULL;
  return temp;
}
inline ::foxglove::Color* TextAnnotation::mutable_background_color() {
  
  if (background_color_ == NULL) {
    auto* p = CreateMaybeMessage<::foxglove::Color>(GetArenaNoVirtual());
    background_color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:foxglove.TextAnnotation.background_color)
  return background_color_;
}
inline void TextAnnotation::set_allocated_background_color(::foxglove::Color* background_color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(background_color_);
  }
  if (background_color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      background_color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, background_color, submessage_arena);
    }
    
  } else {
    
  }
  background_color_ = background_color;
  // @@protoc_insertion_point(field_set_allocated:foxglove.TextAnnotation.background_color)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace foxglove

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_foxglove_2fTextAnnotation_2eproto

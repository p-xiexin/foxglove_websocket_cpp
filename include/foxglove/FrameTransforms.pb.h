// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/FrameTransforms.proto

#ifndef PROTOBUF_INCLUDED_foxglove_2fFrameTransforms_2eproto
#define PROTOBUF_INCLUDED_foxglove_2fFrameTransforms_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "foxglove/FrameTransform.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_foxglove_2fFrameTransforms_2eproto 

namespace protobuf_foxglove_2fFrameTransforms_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_foxglove_2fFrameTransforms_2eproto
namespace foxglove {
class FrameTransforms;
class FrameTransformsDefaultTypeInternal;
extern FrameTransformsDefaultTypeInternal _FrameTransforms_default_instance_;
}  // namespace foxglove
namespace google {
namespace protobuf {
template<> ::foxglove::FrameTransforms* Arena::CreateMaybeMessage<::foxglove::FrameTransforms>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace foxglove {

// ===================================================================

class FrameTransforms : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:foxglove.FrameTransforms) */ {
 public:
  FrameTransforms();
  virtual ~FrameTransforms();

  FrameTransforms(const FrameTransforms& from);

  inline FrameTransforms& operator=(const FrameTransforms& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FrameTransforms(FrameTransforms&& from) noexcept
    : FrameTransforms() {
    *this = ::std::move(from);
  }

  inline FrameTransforms& operator=(FrameTransforms&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameTransforms& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameTransforms* internal_default_instance() {
    return reinterpret_cast<const FrameTransforms*>(
               &_FrameTransforms_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FrameTransforms* other);
  friend void swap(FrameTransforms& a, FrameTransforms& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FrameTransforms* New() const final {
    return CreateMaybeMessage<FrameTransforms>(NULL);
  }

  FrameTransforms* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FrameTransforms>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FrameTransforms& from);
  void MergeFrom(const FrameTransforms& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameTransforms* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .foxglove.FrameTransform transforms = 1;
  int transforms_size() const;
  void clear_transforms();
  static const int kTransformsFieldNumber = 1;
  ::foxglove::FrameTransform* mutable_transforms(int index);
  ::google::protobuf::RepeatedPtrField< ::foxglove::FrameTransform >*
      mutable_transforms();
  const ::foxglove::FrameTransform& transforms(int index) const;
  ::foxglove::FrameTransform* add_transforms();
  const ::google::protobuf::RepeatedPtrField< ::foxglove::FrameTransform >&
      transforms() const;

  // @@protoc_insertion_point(class_scope:foxglove.FrameTransforms)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::foxglove::FrameTransform > transforms_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_foxglove_2fFrameTransforms_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FrameTransforms

// repeated .foxglove.FrameTransform transforms = 1;
inline int FrameTransforms::transforms_size() const {
  return transforms_.size();
}
inline ::foxglove::FrameTransform* FrameTransforms::mutable_transforms(int index) {
  // @@protoc_insertion_point(field_mutable:foxglove.FrameTransforms.transforms)
  return transforms_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::foxglove::FrameTransform >*
FrameTransforms::mutable_transforms() {
  // @@protoc_insertion_point(field_mutable_list:foxglove.FrameTransforms.transforms)
  return &transforms_;
}
inline const ::foxglove::FrameTransform& FrameTransforms::transforms(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.FrameTransforms.transforms)
  return transforms_.Get(index);
}
inline ::foxglove::FrameTransform* FrameTransforms::add_transforms() {
  // @@protoc_insertion_point(field_add:foxglove.FrameTransforms.transforms)
  return transforms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::foxglove::FrameTransform >&
FrameTransforms::transforms() const {
  // @@protoc_insertion_point(field_list:foxglove.FrameTransforms.transforms)
  return transforms_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace foxglove

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_foxglove_2fFrameTransforms_2eproto

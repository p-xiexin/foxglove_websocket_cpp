// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/ModelPrimitive.proto

#ifndef PROTOBUF_INCLUDED_foxglove_2fModelPrimitive_2eproto
#define PROTOBUF_INCLUDED_foxglove_2fModelPrimitive_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "foxglove/Color.pb.h"
#include "foxglove/Pose.pb.h"
#include "foxglove/Vector3.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_foxglove_2fModelPrimitive_2eproto 

namespace protobuf_foxglove_2fModelPrimitive_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_foxglove_2fModelPrimitive_2eproto
namespace foxglove {
class ModelPrimitive;
class ModelPrimitiveDefaultTypeInternal;
extern ModelPrimitiveDefaultTypeInternal _ModelPrimitive_default_instance_;
}  // namespace foxglove
namespace google {
namespace protobuf {
template<> ::foxglove::ModelPrimitive* Arena::CreateMaybeMessage<::foxglove::ModelPrimitive>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace foxglove {

// ===================================================================

class ModelPrimitive : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:foxglove.ModelPrimitive) */ {
 public:
  ModelPrimitive();
  virtual ~ModelPrimitive();

  ModelPrimitive(const ModelPrimitive& from);

  inline ModelPrimitive& operator=(const ModelPrimitive& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModelPrimitive(ModelPrimitive&& from) noexcept
    : ModelPrimitive() {
    *this = ::std::move(from);
  }

  inline ModelPrimitive& operator=(ModelPrimitive&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelPrimitive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelPrimitive* internal_default_instance() {
    return reinterpret_cast<const ModelPrimitive*>(
               &_ModelPrimitive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ModelPrimitive* other);
  friend void swap(ModelPrimitive& a, ModelPrimitive& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModelPrimitive* New() const final {
    return CreateMaybeMessage<ModelPrimitive>(NULL);
  }

  ModelPrimitive* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ModelPrimitive>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ModelPrimitive& from);
  void MergeFrom(const ModelPrimitive& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelPrimitive* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string url = 5;
  void clear_url();
  static const int kUrlFieldNumber = 5;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // string media_type = 6;
  void clear_media_type();
  static const int kMediaTypeFieldNumber = 6;
  const ::std::string& media_type() const;
  void set_media_type(const ::std::string& value);
  #if LANG_CXX11
  void set_media_type(::std::string&& value);
  #endif
  void set_media_type(const char* value);
  void set_media_type(const char* value, size_t size);
  ::std::string* mutable_media_type();
  ::std::string* release_media_type();
  void set_allocated_media_type(::std::string* media_type);

  // bytes data = 7;
  void clear_data();
  static const int kDataFieldNumber = 7;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .foxglove.Pose pose = 1;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 1;
  private:
  const ::foxglove::Pose& _internal_pose() const;
  public:
  const ::foxglove::Pose& pose() const;
  ::foxglove::Pose* release_pose();
  ::foxglove::Pose* mutable_pose();
  void set_allocated_pose(::foxglove::Pose* pose);

  // .foxglove.Vector3 scale = 2;
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  private:
  const ::foxglove::Vector3& _internal_scale() const;
  public:
  const ::foxglove::Vector3& scale() const;
  ::foxglove::Vector3* release_scale();
  ::foxglove::Vector3* mutable_scale();
  void set_allocated_scale(::foxglove::Vector3* scale);

  // .foxglove.Color color = 3;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 3;
  private:
  const ::foxglove::Color& _internal_color() const;
  public:
  const ::foxglove::Color& color() const;
  ::foxglove::Color* release_color();
  ::foxglove::Color* mutable_color();
  void set_allocated_color(::foxglove::Color* color);

  // bool override_color = 4;
  void clear_override_color();
  static const int kOverrideColorFieldNumber = 4;
  bool override_color() const;
  void set_override_color(bool value);

  // @@protoc_insertion_point(class_scope:foxglove.ModelPrimitive)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr media_type_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::foxglove::Pose* pose_;
  ::foxglove::Vector3* scale_;
  ::foxglove::Color* color_;
  bool override_color_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_foxglove_2fModelPrimitive_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ModelPrimitive

// .foxglove.Pose pose = 1;
inline bool ModelPrimitive::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline const ::foxglove::Pose& ModelPrimitive::_internal_pose() const {
  return *pose_;
}
inline const ::foxglove::Pose& ModelPrimitive::pose() const {
  const ::foxglove::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:foxglove.ModelPrimitive.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::foxglove::Pose*>(
      &::foxglove::_Pose_default_instance_);
}
inline ::foxglove::Pose* ModelPrimitive::release_pose() {
  // @@protoc_insertion_point(field_release:foxglove.ModelPrimitive.pose)
  
  ::foxglove::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::foxglove::Pose* ModelPrimitive::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::foxglove::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:foxglove.ModelPrimitive.pose)
  return pose_;
}
inline void ModelPrimitive::set_allocated_pose(::foxglove::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:foxglove.ModelPrimitive.pose)
}

// .foxglove.Vector3 scale = 2;
inline bool ModelPrimitive::has_scale() const {
  return this != internal_default_instance() && scale_ != NULL;
}
inline const ::foxglove::Vector3& ModelPrimitive::_internal_scale() const {
  return *scale_;
}
inline const ::foxglove::Vector3& ModelPrimitive::scale() const {
  const ::foxglove::Vector3* p = scale_;
  // @@protoc_insertion_point(field_get:foxglove.ModelPrimitive.scale)
  return p != NULL ? *p : *reinterpret_cast<const ::foxglove::Vector3*>(
      &::foxglove::_Vector3_default_instance_);
}
inline ::foxglove::Vector3* ModelPrimitive::release_scale() {
  // @@protoc_insertion_point(field_release:foxglove.ModelPrimitive.scale)
  
  ::foxglove::Vector3* temp = scale_;
  scale_ = NULL;
  return temp;
}
inline ::foxglove::Vector3* ModelPrimitive::mutable_scale() {
  
  if (scale_ == NULL) {
    auto* p = CreateMaybeMessage<::foxglove::Vector3>(GetArenaNoVirtual());
    scale_ = p;
  }
  // @@protoc_insertion_point(field_mutable:foxglove.ModelPrimitive.scale)
  return scale_;
}
inline void ModelPrimitive::set_allocated_scale(::foxglove::Vector3* scale) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scale_);
  }
  if (scale) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scale = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    
  } else {
    
  }
  scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:foxglove.ModelPrimitive.scale)
}

// .foxglove.Color color = 3;
inline bool ModelPrimitive::has_color() const {
  return this != internal_default_instance() && color_ != NULL;
}
inline const ::foxglove::Color& ModelPrimitive::_internal_color() const {
  return *color_;
}
inline const ::foxglove::Color& ModelPrimitive::color() const {
  const ::foxglove::Color* p = color_;
  // @@protoc_insertion_point(field_get:foxglove.ModelPrimitive.color)
  return p != NULL ? *p : *reinterpret_cast<const ::foxglove::Color*>(
      &::foxglove::_Color_default_instance_);
}
inline ::foxglove::Color* ModelPrimitive::release_color() {
  // @@protoc_insertion_point(field_release:foxglove.ModelPrimitive.color)
  
  ::foxglove::Color* temp = color_;
  color_ = NULL;
  return temp;
}
inline ::foxglove::Color* ModelPrimitive::mutable_color() {
  
  if (color_ == NULL) {
    auto* p = CreateMaybeMessage<::foxglove::Color>(GetArenaNoVirtual());
    color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:foxglove.ModelPrimitive.color)
  return color_;
}
inline void ModelPrimitive::set_allocated_color(::foxglove::Color* color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(color_);
  }
  if (color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:foxglove.ModelPrimitive.color)
}

// bool override_color = 4;
inline void ModelPrimitive::clear_override_color() {
  override_color_ = false;
}
inline bool ModelPrimitive::override_color() const {
  // @@protoc_insertion_point(field_get:foxglove.ModelPrimitive.override_color)
  return override_color_;
}
inline void ModelPrimitive::set_override_color(bool value) {
  
  override_color_ = value;
  // @@protoc_insertion_point(field_set:foxglove.ModelPrimitive.override_color)
}

// string url = 5;
inline void ModelPrimitive::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModelPrimitive::url() const {
  // @@protoc_insertion_point(field_get:foxglove.ModelPrimitive.url)
  return url_.GetNoArena();
}
inline void ModelPrimitive::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:foxglove.ModelPrimitive.url)
}
#if LANG_CXX11
inline void ModelPrimitive::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:foxglove.ModelPrimitive.url)
}
#endif
inline void ModelPrimitive::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:foxglove.ModelPrimitive.url)
}
inline void ModelPrimitive::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:foxglove.ModelPrimitive.url)
}
inline ::std::string* ModelPrimitive::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:foxglove.ModelPrimitive.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelPrimitive::release_url() {
  // @@protoc_insertion_point(field_release:foxglove.ModelPrimitive.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelPrimitive::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:foxglove.ModelPrimitive.url)
}

// string media_type = 6;
inline void ModelPrimitive::clear_media_type() {
  media_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModelPrimitive::media_type() const {
  // @@protoc_insertion_point(field_get:foxglove.ModelPrimitive.media_type)
  return media_type_.GetNoArena();
}
inline void ModelPrimitive::set_media_type(const ::std::string& value) {
  
  media_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:foxglove.ModelPrimitive.media_type)
}
#if LANG_CXX11
inline void ModelPrimitive::set_media_type(::std::string&& value) {
  
  media_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:foxglove.ModelPrimitive.media_type)
}
#endif
inline void ModelPrimitive::set_media_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  media_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:foxglove.ModelPrimitive.media_type)
}
inline void ModelPrimitive::set_media_type(const char* value, size_t size) {
  
  media_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:foxglove.ModelPrimitive.media_type)
}
inline ::std::string* ModelPrimitive::mutable_media_type() {
  
  // @@protoc_insertion_point(field_mutable:foxglove.ModelPrimitive.media_type)
  return media_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelPrimitive::release_media_type() {
  // @@protoc_insertion_point(field_release:foxglove.ModelPrimitive.media_type)
  
  return media_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelPrimitive::set_allocated_media_type(::std::string* media_type) {
  if (media_type != NULL) {
    
  } else {
    
  }
  media_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), media_type);
  // @@protoc_insertion_point(field_set_allocated:foxglove.ModelPrimitive.media_type)
}

// bytes data = 7;
inline void ModelPrimitive::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModelPrimitive::data() const {
  // @@protoc_insertion_point(field_get:foxglove.ModelPrimitive.data)
  return data_.GetNoArena();
}
inline void ModelPrimitive::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:foxglove.ModelPrimitive.data)
}
#if LANG_CXX11
inline void ModelPrimitive::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:foxglove.ModelPrimitive.data)
}
#endif
inline void ModelPrimitive::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:foxglove.ModelPrimitive.data)
}
inline void ModelPrimitive::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:foxglove.ModelPrimitive.data)
}
inline ::std::string* ModelPrimitive::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:foxglove.ModelPrimitive.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelPrimitive::release_data() {
  // @@protoc_insertion_point(field_release:foxglove.ModelPrimitive.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelPrimitive::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:foxglove.ModelPrimitive.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace foxglove

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_foxglove_2fModelPrimitive_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/TextPrimitive.proto

#ifndef PROTOBUF_INCLUDED_foxglove_2fTextPrimitive_2eproto
#define PROTOBUF_INCLUDED_foxglove_2fTextPrimitive_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "foxglove/Color.pb.h"
#include "foxglove/Pose.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_foxglove_2fTextPrimitive_2eproto 

namespace protobuf_foxglove_2fTextPrimitive_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_foxglove_2fTextPrimitive_2eproto
namespace foxglove {
class TextPrimitive;
class TextPrimitiveDefaultTypeInternal;
extern TextPrimitiveDefaultTypeInternal _TextPrimitive_default_instance_;
}  // namespace foxglove
namespace google {
namespace protobuf {
template<> ::foxglove::TextPrimitive* Arena::CreateMaybeMessage<::foxglove::TextPrimitive>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace foxglove {

// ===================================================================

class TextPrimitive : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:foxglove.TextPrimitive) */ {
 public:
  TextPrimitive();
  virtual ~TextPrimitive();

  TextPrimitive(const TextPrimitive& from);

  inline TextPrimitive& operator=(const TextPrimitive& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TextPrimitive(TextPrimitive&& from) noexcept
    : TextPrimitive() {
    *this = ::std::move(from);
  }

  inline TextPrimitive& operator=(TextPrimitive&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TextPrimitive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TextPrimitive* internal_default_instance() {
    return reinterpret_cast<const TextPrimitive*>(
               &_TextPrimitive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TextPrimitive* other);
  friend void swap(TextPrimitive& a, TextPrimitive& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TextPrimitive* New() const final {
    return CreateMaybeMessage<TextPrimitive>(NULL);
  }

  TextPrimitive* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TextPrimitive>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TextPrimitive& from);
  void MergeFrom(const TextPrimitive& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextPrimitive* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 6;
  void clear_text();
  static const int kTextFieldNumber = 6;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // .foxglove.Pose pose = 1;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 1;
  private:
  const ::foxglove::Pose& _internal_pose() const;
  public:
  const ::foxglove::Pose& pose() const;
  ::foxglove::Pose* release_pose();
  ::foxglove::Pose* mutable_pose();
  void set_allocated_pose(::foxglove::Pose* pose);

  // .foxglove.Color color = 5;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 5;
  private:
  const ::foxglove::Color& _internal_color() const;
  public:
  const ::foxglove::Color& color() const;
  ::foxglove::Color* release_color();
  ::foxglove::Color* mutable_color();
  void set_allocated_color(::foxglove::Color* color);

  // double font_size = 3;
  void clear_font_size();
  static const int kFontSizeFieldNumber = 3;
  double font_size() const;
  void set_font_size(double value);

  // bool billboard = 2;
  void clear_billboard();
  static const int kBillboardFieldNumber = 2;
  bool billboard() const;
  void set_billboard(bool value);

  // bool scale_invariant = 4;
  void clear_scale_invariant();
  static const int kScaleInvariantFieldNumber = 4;
  bool scale_invariant() const;
  void set_scale_invariant(bool value);

  // @@protoc_insertion_point(class_scope:foxglove.TextPrimitive)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::foxglove::Pose* pose_;
  ::foxglove::Color* color_;
  double font_size_;
  bool billboard_;
  bool scale_invariant_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_foxglove_2fTextPrimitive_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TextPrimitive

// .foxglove.Pose pose = 1;
inline bool TextPrimitive::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline const ::foxglove::Pose& TextPrimitive::_internal_pose() const {
  return *pose_;
}
inline const ::foxglove::Pose& TextPrimitive::pose() const {
  const ::foxglove::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:foxglove.TextPrimitive.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::foxglove::Pose*>(
      &::foxglove::_Pose_default_instance_);
}
inline ::foxglove::Pose* TextPrimitive::release_pose() {
  // @@protoc_insertion_point(field_release:foxglove.TextPrimitive.pose)
  
  ::foxglove::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::foxglove::Pose* TextPrimitive::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::foxglove::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:foxglove.TextPrimitive.pose)
  return pose_;
}
inline void TextPrimitive::set_allocated_pose(::foxglove::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:foxglove.TextPrimitive.pose)
}

// bool billboard = 2;
inline void TextPrimitive::clear_billboard() {
  billboard_ = false;
}
inline bool TextPrimitive::billboard() const {
  // @@protoc_insertion_point(field_get:foxglove.TextPrimitive.billboard)
  return billboard_;
}
inline void TextPrimitive::set_billboard(bool value) {
  
  billboard_ = value;
  // @@protoc_insertion_point(field_set:foxglove.TextPrimitive.billboard)
}

// double font_size = 3;
inline void TextPrimitive::clear_font_size() {
  font_size_ = 0;
}
inline double TextPrimitive::font_size() const {
  // @@protoc_insertion_point(field_get:foxglove.TextPrimitive.font_size)
  return font_size_;
}
inline void TextPrimitive::set_font_size(double value) {
  
  font_size_ = value;
  // @@protoc_insertion_point(field_set:foxglove.TextPrimitive.font_size)
}

// bool scale_invariant = 4;
inline void TextPrimitive::clear_scale_invariant() {
  scale_invariant_ = false;
}
inline bool TextPrimitive::scale_invariant() const {
  // @@protoc_insertion_point(field_get:foxglove.TextPrimitive.scale_invariant)
  return scale_invariant_;
}
inline void TextPrimitive::set_scale_invariant(bool value) {
  
  scale_invariant_ = value;
  // @@protoc_insertion_point(field_set:foxglove.TextPrimitive.scale_invariant)
}

// .foxglove.Color color = 5;
inline bool TextPrimitive::has_color() const {
  return this != internal_default_instance() && color_ != NULL;
}
inline const ::foxglove::Color& TextPrimitive::_internal_color() const {
  return *color_;
}
inline const ::foxglove::Color& TextPrimitive::color() const {
  const ::foxglove::Color* p = color_;
  // @@protoc_insertion_point(field_get:foxglove.TextPrimitive.color)
  return p != NULL ? *p : *reinterpret_cast<const ::foxglove::Color*>(
      &::foxglove::_Color_default_instance_);
}
inline ::foxglove::Color* TextPrimitive::release_color() {
  // @@protoc_insertion_point(field_release:foxglove.TextPrimitive.color)
  
  ::foxglove::Color* temp = color_;
  color_ = NULL;
  return temp;
}
inline ::foxglove::Color* TextPrimitive::mutable_color() {
  
  if (color_ == NULL) {
    auto* p = CreateMaybeMessage<::foxglove::Color>(GetArenaNoVirtual());
    color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:foxglove.TextPrimitive.color)
  return color_;
}
inline void TextPrimitive::set_allocated_color(::foxglove::Color* color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(color_);
  }
  if (color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:foxglove.TextPrimitive.color)
}

// string text = 6;
inline void TextPrimitive::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TextPrimitive::text() const {
  // @@protoc_insertion_point(field_get:foxglove.TextPrimitive.text)
  return text_.GetNoArena();
}
inline void TextPrimitive::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:foxglove.TextPrimitive.text)
}
#if LANG_CXX11
inline void TextPrimitive::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:foxglove.TextPrimitive.text)
}
#endif
inline void TextPrimitive::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:foxglove.TextPrimitive.text)
}
inline void TextPrimitive::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:foxglove.TextPrimitive.text)
}
inline ::std::string* TextPrimitive::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:foxglove.TextPrimitive.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TextPrimitive::release_text() {
  // @@protoc_insertion_point(field_release:foxglove.TextPrimitive.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TextPrimitive::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:foxglove.TextPrimitive.text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace foxglove

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_foxglove_2fTextPrimitive_2eproto

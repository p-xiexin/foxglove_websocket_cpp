// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/CylinderPrimitive.proto

#include "foxglove/CylinderPrimitive.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_foxglove_2fColor_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_foxglove_2fColor_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Color;
}  // namespace protobuf_foxglove_2fColor_2eproto
namespace protobuf_foxglove_2fPose_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_foxglove_2fPose_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Pose;
}  // namespace protobuf_foxglove_2fPose_2eproto
namespace protobuf_foxglove_2fVector3_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_foxglove_2fVector3_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector3;
}  // namespace protobuf_foxglove_2fVector3_2eproto
namespace foxglove {
class CylinderPrimitiveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CylinderPrimitive>
      _instance;
} _CylinderPrimitive_default_instance_;
}  // namespace foxglove
namespace protobuf_foxglove_2fCylinderPrimitive_2eproto {
static void InitDefaultsCylinderPrimitive() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foxglove::_CylinderPrimitive_default_instance_;
    new (ptr) ::foxglove::CylinderPrimitive();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foxglove::CylinderPrimitive::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CylinderPrimitive =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCylinderPrimitive}, {
      &protobuf_foxglove_2fPose_2eproto::scc_info_Pose.base,
      &protobuf_foxglove_2fVector3_2eproto::scc_info_Vector3.base,
      &protobuf_foxglove_2fColor_2eproto::scc_info_Color.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CylinderPrimitive.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::foxglove::CylinderPrimitive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::foxglove::CylinderPrimitive, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::foxglove::CylinderPrimitive, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::foxglove::CylinderPrimitive, bottom_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::foxglove::CylinderPrimitive, top_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::foxglove::CylinderPrimitive, color_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::foxglove::CylinderPrimitive)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::foxglove::_CylinderPrimitive_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "foxglove/CylinderPrimitive.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n foxglove/CylinderPrimitive.proto\022\010foxg"
      "love\032\024foxglove/Color.proto\032\023foxglove/Pos"
      "e.proto\032\026foxglove/Vector3.proto\"\233\001\n\021Cyli"
      "nderPrimitive\022\034\n\004pose\030\001 \001(\0132\016.foxglove.P"
      "ose\022\037\n\004size\030\002 \001(\0132\021.foxglove.Vector3\022\024\n\014"
      "bottom_scale\030\003 \001(\001\022\021\n\ttop_scale\030\004 \001(\001\022\036\n"
      "\005color\030\005 \001(\0132\017.foxglove.Colorb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 277);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "foxglove/CylinderPrimitive.proto", &protobuf_RegisterTypes);
  ::protobuf_foxglove_2fColor_2eproto::AddDescriptors();
  ::protobuf_foxglove_2fPose_2eproto::AddDescriptors();
  ::protobuf_foxglove_2fVector3_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_foxglove_2fCylinderPrimitive_2eproto
namespace foxglove {

// ===================================================================

void CylinderPrimitive::InitAsDefaultInstance() {
  ::foxglove::_CylinderPrimitive_default_instance_._instance.get_mutable()->pose_ = const_cast< ::foxglove::Pose*>(
      ::foxglove::Pose::internal_default_instance());
  ::foxglove::_CylinderPrimitive_default_instance_._instance.get_mutable()->size_ = const_cast< ::foxglove::Vector3*>(
      ::foxglove::Vector3::internal_default_instance());
  ::foxglove::_CylinderPrimitive_default_instance_._instance.get_mutable()->color_ = const_cast< ::foxglove::Color*>(
      ::foxglove::Color::internal_default_instance());
}
void CylinderPrimitive::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
}
void CylinderPrimitive::clear_size() {
  if (GetArenaNoVirtual() == NULL && size_ != NULL) {
    delete size_;
  }
  size_ = NULL;
}
void CylinderPrimitive::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) {
    delete color_;
  }
  color_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CylinderPrimitive::kPoseFieldNumber;
const int CylinderPrimitive::kSizeFieldNumber;
const int CylinderPrimitive::kBottomScaleFieldNumber;
const int CylinderPrimitive::kTopScaleFieldNumber;
const int CylinderPrimitive::kColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CylinderPrimitive::CylinderPrimitive()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_foxglove_2fCylinderPrimitive_2eproto::scc_info_CylinderPrimitive.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:foxglove.CylinderPrimitive)
}
CylinderPrimitive::CylinderPrimitive(const CylinderPrimitive& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pose()) {
    pose_ = new ::foxglove::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_size()) {
    size_ = new ::foxglove::Vector3(*from.size_);
  } else {
    size_ = NULL;
  }
  if (from.has_color()) {
    color_ = new ::foxglove::Color(*from.color_);
  } else {
    color_ = NULL;
  }
  ::memcpy(&bottom_scale_, &from.bottom_scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&top_scale_) -
    reinterpret_cast<char*>(&bottom_scale_)) + sizeof(top_scale_));
  // @@protoc_insertion_point(copy_constructor:foxglove.CylinderPrimitive)
}

void CylinderPrimitive::SharedCtor() {
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&top_scale_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(top_scale_));
}

CylinderPrimitive::~CylinderPrimitive() {
  // @@protoc_insertion_point(destructor:foxglove.CylinderPrimitive)
  SharedDtor();
}

void CylinderPrimitive::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete size_;
  if (this != internal_default_instance()) delete color_;
}

void CylinderPrimitive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CylinderPrimitive::descriptor() {
  ::protobuf_foxglove_2fCylinderPrimitive_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_foxglove_2fCylinderPrimitive_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CylinderPrimitive& CylinderPrimitive::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_foxglove_2fCylinderPrimitive_2eproto::scc_info_CylinderPrimitive.base);
  return *internal_default_instance();
}


void CylinderPrimitive::Clear() {
// @@protoc_insertion_point(message_clear_start:foxglove.CylinderPrimitive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && size_ != NULL) {
    delete size_;
  }
  size_ = NULL;
  if (GetArenaNoVirtual() == NULL && color_ != NULL) {
    delete color_;
  }
  color_ = NULL;
  ::memset(&bottom_scale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&top_scale_) -
      reinterpret_cast<char*>(&bottom_scale_)) + sizeof(top_scale_));
  _internal_metadata_.Clear();
}

bool CylinderPrimitive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:foxglove.CylinderPrimitive)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .foxglove.Pose pose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .foxglove.Vector3 size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double bottom_scale = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bottom_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double top_scale = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &top_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .foxglove.Color color = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:foxglove.CylinderPrimitive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:foxglove.CylinderPrimitive)
  return false;
#undef DO_
}

void CylinderPrimitive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:foxglove.CylinderPrimitive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .foxglove.Pose pose = 1;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_pose(), output);
  }

  // .foxglove.Vector3 size = 2;
  if (this->has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_size(), output);
  }

  // double bottom_scale = 3;
  if (this->bottom_scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->bottom_scale(), output);
  }

  // double top_scale = 4;
  if (this->top_scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->top_scale(), output);
  }

  // .foxglove.Color color = 5;
  if (this->has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_color(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:foxglove.CylinderPrimitive)
}

::google::protobuf::uint8* CylinderPrimitive::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:foxglove.CylinderPrimitive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .foxglove.Pose pose = 1;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_pose(), deterministic, target);
  }

  // .foxglove.Vector3 size = 2;
  if (this->has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_size(), deterministic, target);
  }

  // double bottom_scale = 3;
  if (this->bottom_scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->bottom_scale(), target);
  }

  // double top_scale = 4;
  if (this->top_scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->top_scale(), target);
  }

  // .foxglove.Color color = 5;
  if (this->has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_color(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foxglove.CylinderPrimitive)
  return target;
}

size_t CylinderPrimitive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foxglove.CylinderPrimitive)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .foxglove.Pose pose = 1;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .foxglove.Vector3 size = 2;
  if (this->has_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *size_);
  }

  // .foxglove.Color color = 5;
  if (this->has_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *color_);
  }

  // double bottom_scale = 3;
  if (this->bottom_scale() != 0) {
    total_size += 1 + 8;
  }

  // double top_scale = 4;
  if (this->top_scale() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CylinderPrimitive::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foxglove.CylinderPrimitive)
  GOOGLE_DCHECK_NE(&from, this);
  const CylinderPrimitive* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CylinderPrimitive>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foxglove.CylinderPrimitive)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foxglove.CylinderPrimitive)
    MergeFrom(*source);
  }
}

void CylinderPrimitive::MergeFrom(const CylinderPrimitive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foxglove.CylinderPrimitive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    mutable_pose()->::foxglove::Pose::MergeFrom(from.pose());
  }
  if (from.has_size()) {
    mutable_size()->::foxglove::Vector3::MergeFrom(from.size());
  }
  if (from.has_color()) {
    mutable_color()->::foxglove::Color::MergeFrom(from.color());
  }
  if (from.bottom_scale() != 0) {
    set_bottom_scale(from.bottom_scale());
  }
  if (from.top_scale() != 0) {
    set_top_scale(from.top_scale());
  }
}

void CylinderPrimitive::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foxglove.CylinderPrimitive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CylinderPrimitive::CopyFrom(const CylinderPrimitive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foxglove.CylinderPrimitive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CylinderPrimitive::IsInitialized() const {
  return true;
}

void CylinderPrimitive::Swap(CylinderPrimitive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CylinderPrimitive::InternalSwap(CylinderPrimitive* other) {
  using std::swap;
  swap(pose_, other->pose_);
  swap(size_, other->size_);
  swap(color_, other->color_);
  swap(bottom_scale_, other->bottom_scale_);
  swap(top_scale_, other->top_scale_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CylinderPrimitive::GetMetadata() const {
  protobuf_foxglove_2fCylinderPrimitive_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_foxglove_2fCylinderPrimitive_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace foxglove
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::foxglove::CylinderPrimitive* Arena::CreateMaybeMessage< ::foxglove::CylinderPrimitive >(Arena* arena) {
  return Arena::CreateInternal< ::foxglove::CylinderPrimitive >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/ModelPrimitive.proto

#include "foxglove/ModelPrimitive.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_foxglove_2fColor_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_foxglove_2fColor_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Color;
}  // namespace protobuf_foxglove_2fColor_2eproto
namespace protobuf_foxglove_2fPose_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_foxglove_2fPose_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Pose;
}  // namespace protobuf_foxglove_2fPose_2eproto
namespace protobuf_foxglove_2fVector3_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_foxglove_2fVector3_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector3;
}  // namespace protobuf_foxglove_2fVector3_2eproto
namespace foxglove {
class ModelPrimitiveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ModelPrimitive>
      _instance;
} _ModelPrimitive_default_instance_;
}  // namespace foxglove
namespace protobuf_foxglove_2fModelPrimitive_2eproto {
static void InitDefaultsModelPrimitive() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foxglove::_ModelPrimitive_default_instance_;
    new (ptr) ::foxglove::ModelPrimitive();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foxglove::ModelPrimitive::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ModelPrimitive =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsModelPrimitive}, {
      &protobuf_foxglove_2fPose_2eproto::scc_info_Pose.base,
      &protobuf_foxglove_2fVector3_2eproto::scc_info_Vector3.base,
      &protobuf_foxglove_2fColor_2eproto::scc_info_Color.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ModelPrimitive.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::foxglove::ModelPrimitive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::foxglove::ModelPrimitive, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::foxglove::ModelPrimitive, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::foxglove::ModelPrimitive, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::foxglove::ModelPrimitive, override_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::foxglove::ModelPrimitive, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::foxglove::ModelPrimitive, media_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::foxglove::ModelPrimitive, data_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::foxglove::ModelPrimitive)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::foxglove::_ModelPrimitive_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "foxglove/ModelPrimitive.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035foxglove/ModelPrimitive.proto\022\010foxglov"
      "e\032\024foxglove/Color.proto\032\023foxglove/Pose.p"
      "roto\032\026foxglove/Vector3.proto\"\267\001\n\016ModelPr"
      "imitive\022\034\n\004pose\030\001 \001(\0132\016.foxglove.Pose\022 \n"
      "\005scale\030\002 \001(\0132\021.foxglove.Vector3\022\036\n\005color"
      "\030\003 \001(\0132\017.foxglove.Color\022\026\n\016override_colo"
      "r\030\004 \001(\010\022\013\n\003url\030\005 \001(\t\022\022\n\nmedia_type\030\006 \001(\t"
      "\022\014\n\004data\030\007 \001(\014b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 302);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "foxglove/ModelPrimitive.proto", &protobuf_RegisterTypes);
  ::protobuf_foxglove_2fColor_2eproto::AddDescriptors();
  ::protobuf_foxglove_2fPose_2eproto::AddDescriptors();
  ::protobuf_foxglove_2fVector3_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_foxglove_2fModelPrimitive_2eproto
namespace foxglove {

// ===================================================================

void ModelPrimitive::InitAsDefaultInstance() {
  ::foxglove::_ModelPrimitive_default_instance_._instance.get_mutable()->pose_ = const_cast< ::foxglove::Pose*>(
      ::foxglove::Pose::internal_default_instance());
  ::foxglove::_ModelPrimitive_default_instance_._instance.get_mutable()->scale_ = const_cast< ::foxglove::Vector3*>(
      ::foxglove::Vector3::internal_default_instance());
  ::foxglove::_ModelPrimitive_default_instance_._instance.get_mutable()->color_ = const_cast< ::foxglove::Color*>(
      ::foxglove::Color::internal_default_instance());
}
void ModelPrimitive::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
}
void ModelPrimitive::clear_scale() {
  if (GetArenaNoVirtual() == NULL && scale_ != NULL) {
    delete scale_;
  }
  scale_ = NULL;
}
void ModelPrimitive::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) {
    delete color_;
  }
  color_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelPrimitive::kPoseFieldNumber;
const int ModelPrimitive::kScaleFieldNumber;
const int ModelPrimitive::kColorFieldNumber;
const int ModelPrimitive::kOverrideColorFieldNumber;
const int ModelPrimitive::kUrlFieldNumber;
const int ModelPrimitive::kMediaTypeFieldNumber;
const int ModelPrimitive::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelPrimitive::ModelPrimitive()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_foxglove_2fModelPrimitive_2eproto::scc_info_ModelPrimitive.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:foxglove.ModelPrimitive)
}
ModelPrimitive::ModelPrimitive(const ModelPrimitive& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.url().size() > 0) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  media_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.media_type().size() > 0) {
    media_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.media_type_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_pose()) {
    pose_ = new ::foxglove::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_scale()) {
    scale_ = new ::foxglove::Vector3(*from.scale_);
  } else {
    scale_ = NULL;
  }
  if (from.has_color()) {
    color_ = new ::foxglove::Color(*from.color_);
  } else {
    color_ = NULL;
  }
  override_color_ = from.override_color_;
  // @@protoc_insertion_point(copy_constructor:foxglove.ModelPrimitive)
}

void ModelPrimitive::SharedCtor() {
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&override_color_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(override_color_));
}

ModelPrimitive::~ModelPrimitive() {
  // @@protoc_insertion_point(destructor:foxglove.ModelPrimitive)
  SharedDtor();
}

void ModelPrimitive::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete scale_;
  if (this != internal_default_instance()) delete color_;
}

void ModelPrimitive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ModelPrimitive::descriptor() {
  ::protobuf_foxglove_2fModelPrimitive_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_foxglove_2fModelPrimitive_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModelPrimitive& ModelPrimitive::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_foxglove_2fModelPrimitive_2eproto::scc_info_ModelPrimitive.base);
  return *internal_default_instance();
}


void ModelPrimitive::Clear() {
// @@protoc_insertion_point(message_clear_start:foxglove.ModelPrimitive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && scale_ != NULL) {
    delete scale_;
  }
  scale_ = NULL;
  if (GetArenaNoVirtual() == NULL && color_ != NULL) {
    delete color_;
  }
  color_ = NULL;
  override_color_ = false;
  _internal_metadata_.Clear();
}

bool ModelPrimitive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:foxglove.ModelPrimitive)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .foxglove.Pose pose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .foxglove.Vector3 scale = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .foxglove.Color color = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool override_color = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &override_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string url = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "foxglove.ModelPrimitive.url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string media_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->media_type().data(), static_cast<int>(this->media_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "foxglove.ModelPrimitive.media_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:foxglove.ModelPrimitive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:foxglove.ModelPrimitive)
  return false;
#undef DO_
}

void ModelPrimitive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:foxglove.ModelPrimitive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .foxglove.Pose pose = 1;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_pose(), output);
  }

  // .foxglove.Vector3 scale = 2;
  if (this->has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_scale(), output);
  }

  // .foxglove.Color color = 3;
  if (this->has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_color(), output);
  }

  // bool override_color = 4;
  if (this->override_color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->override_color(), output);
  }

  // string url = 5;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "foxglove.ModelPrimitive.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->url(), output);
  }

  // string media_type = 6;
  if (this->media_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->media_type().data(), static_cast<int>(this->media_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "foxglove.ModelPrimitive.media_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->media_type(), output);
  }

  // bytes data = 7;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:foxglove.ModelPrimitive)
}

::google::protobuf::uint8* ModelPrimitive::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:foxglove.ModelPrimitive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .foxglove.Pose pose = 1;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_pose(), deterministic, target);
  }

  // .foxglove.Vector3 scale = 2;
  if (this->has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_scale(), deterministic, target);
  }

  // .foxglove.Color color = 3;
  if (this->has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_color(), deterministic, target);
  }

  // bool override_color = 4;
  if (this->override_color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->override_color(), target);
  }

  // string url = 5;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "foxglove.ModelPrimitive.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->url(), target);
  }

  // string media_type = 6;
  if (this->media_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->media_type().data(), static_cast<int>(this->media_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "foxglove.ModelPrimitive.media_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->media_type(), target);
  }

  // bytes data = 7;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foxglove.ModelPrimitive)
  return target;
}

size_t ModelPrimitive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foxglove.ModelPrimitive)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string url = 5;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  // string media_type = 6;
  if (this->media_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->media_type());
  }

  // bytes data = 7;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // .foxglove.Pose pose = 1;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .foxglove.Vector3 scale = 2;
  if (this->has_scale()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *scale_);
  }

  // .foxglove.Color color = 3;
  if (this->has_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *color_);
  }

  // bool override_color = 4;
  if (this->override_color() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelPrimitive::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foxglove.ModelPrimitive)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelPrimitive* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelPrimitive>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foxglove.ModelPrimitive)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foxglove.ModelPrimitive)
    MergeFrom(*source);
  }
}

void ModelPrimitive::MergeFrom(const ModelPrimitive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foxglove.ModelPrimitive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.media_type().size() > 0) {

    media_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.media_type_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_pose()) {
    mutable_pose()->::foxglove::Pose::MergeFrom(from.pose());
  }
  if (from.has_scale()) {
    mutable_scale()->::foxglove::Vector3::MergeFrom(from.scale());
  }
  if (from.has_color()) {
    mutable_color()->::foxglove::Color::MergeFrom(from.color());
  }
  if (from.override_color() != 0) {
    set_override_color(from.override_color());
  }
}

void ModelPrimitive::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foxglove.ModelPrimitive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelPrimitive::CopyFrom(const ModelPrimitive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foxglove.ModelPrimitive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelPrimitive::IsInitialized() const {
  return true;
}

void ModelPrimitive::Swap(ModelPrimitive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelPrimitive::InternalSwap(ModelPrimitive* other) {
  using std::swap;
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  media_type_.Swap(&other->media_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pose_, other->pose_);
  swap(scale_, other->scale_);
  swap(color_, other->color_);
  swap(override_color_, other->override_color_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ModelPrimitive::GetMetadata() const {
  protobuf_foxglove_2fModelPrimitive_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_foxglove_2fModelPrimitive_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace foxglove
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::foxglove::ModelPrimitive* Arena::CreateMaybeMessage< ::foxglove::ModelPrimitive >(Arena* arena) {
  return Arena::CreateInternal< ::foxglove::ModelPrimitive >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
